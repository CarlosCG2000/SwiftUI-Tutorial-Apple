/*
See the LICENSE.txt file for this sample‚Äôs licensing information.

Abstract:
A view wrapping a UIPageControl.
*/

import SwiftUI
import UIKit

/**
 Esta clase envuelve UIPageControl de UIKit dentro de SwiftUI usando UIViewRepresentable.
 Se usa para mostrar un indicador de paginaci√≥n en una vista que tiene varias p√°ginas.
 
 üîπ UIViewRepresentable permite usar UIView en SwiftUI.
 üîπ Es √∫til para componentes como UIPageControl, UISlider, MKMapView, etc.
 üîπ Se necesita un Coordinator para manejar eventos UIKit.
 üîπ Este c√≥digo crea un UIPageControl totalmente funcional en SwiftUI.
 
 0Ô∏è‚É£    numberOfPages almacena el n√∫mero total de p√°ginas.
 1Ô∏è‚É£    @Binding var currentPage permite que SwiftUI controle la p√°gina actual.
 2Ô∏è‚É£    makeCoordinator() crea un coordinador que manejar√° eventos de UIKit.
 3Ô∏è‚É£    makeUIView(context:) crea y devuelve un UIPageControl.
 4Ô∏è‚É£    addTarget hace que updateCurrentPage(sender:) se llame cuando el usuario cambia la p√°gina.
 5Ô∏è‚É£    updateUIView(_:context:) actualiza la vista si currentPage cambia en SwiftUI.
 6Ô∏è‚É£    Coordinator es un puente entre UIKit y SwiftUI.
 7Ô∏è‚É£    updateCurrentPage(sender:) actualiza currentPage en SwiftUI cuando el usuario toca UIPageControl.
 */
struct PageControl: UIViewRepresentable { // permite usar vistas de UIKit (UIView) dentro de SwiftUI.
    
    var numberOfPages: Int // 0Ô∏è‚É£ N√∫mero total de p√°ginas
    
    @Binding var currentPage: Int // 1Ô∏è‚É£ P√°gina actual (estado compartido con SwiftUI)

    func makeCoordinator() -> Coordinator { // 2Ô∏è‚É£ Crea el coordinador para manejar eventos de UIKit
        Coordinator(self)
    }

    func makeUIView(context: Context) -> UIPageControl { // 3Ô∏è‚É£ Crea el UIPageControl
        let control = UIPageControl()
        
        control.numberOfPages = numberOfPages
        
        // 4Ô∏è‚É£ A√±adir un target para detectar cambios en el control de p√°gina
        control.addTarget(
            context.coordinator,
            action: #selector(Coordinator.updateCurrentPage(sender:)),
            for: .valueChanged)

        return control
    }

    func updateUIView(_ uiView: UIPageControl, context: Context) { // 5Ô∏è‚É£ Actualiza la vista cuando cambia el estado
        uiView.currentPage = currentPage
    }

    // 6Ô∏è‚É£ Coordinador que maneja eventos de UIPageControl
    /**
     üìå ¬øPor qu√© usamos un Coordinator?
         ‚Ä¢    UIPageControl usa eventos (addTarget) en UIKit.
         ‚Ä¢    SwiftUI no tiene un mecanismo de eventos como UIControlEvent.
         ‚Ä¢    El Coordinator act√∫a como un puente para recibir eventos y actualizar @Binding.

     üîπ Ejemplo sin Coordinator: No podr√≠amos actualizar currentPage en SwiftUI.
     üîπ Ejemplo con Coordinator: SwiftUI recibe el evento y cambia la p√°gina correctamente.
     */
    
    class Coordinator: NSObject {
        var control: PageControl

        init(_ control: PageControl) {
            self.control = control
        }

        @objc
        func updateCurrentPage(sender: UIPageControl) { // 7Ô∏è‚É£ M√©todo que actualiza la p√°gina actual en SwiftUI
            control.currentPage = sender.currentPage
        }
    }
}
