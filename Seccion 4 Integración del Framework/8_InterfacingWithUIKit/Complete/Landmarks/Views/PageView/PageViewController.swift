/*
See the LICENSE.txt file for this sample‚Äôs licensing information.

Abstract:
A view that wraps a UIPageViewController.
*/

import SwiftUI
import UIKit

/**
Este c√≥digo crea un PageViewController que permite a los usuarios deslizarse entre varias vistas SwiftUI como si fueran p√°ginas en un carrusel.
‚úÖ Utiliza UIPageViewController (de UIKit) dentro de SwiftUI.
‚úÖ Soporta deslizamiento horizontal entre p√°ginas.
‚úÖ Usa un coordinador (Coordinator) para manejar la navegaci√≥n entre p√°ginas.
‚úÖ Actualiza la p√°gina actual en @Binding var currentPage.
 
 1Ô∏è‚É£ Propiedades:  Se definen pages (array de vistas) y currentPage (p√°gina actual).
 2Ô∏è‚É£ makeUIViewController:  Crea el UIPageViewController y lo asocia al coordinador.
 3Ô∏è‚É£ updateUIViewController:  Cambia la p√°gina cuando currentPage se actualiza.
 4Ô∏è‚É£ Coordinator:  Gestiona la l√≥gica de navegaci√≥n.
 5Ô∏è‚É£ M√©todos de navegaci√≥n:   Permiten deslizar entre p√°ginas (previa/siguiente).
 6Ô∏è‚É£ didFinishAnimating:   Actualiza currentPage cuando el usuario desliza.
*/

// El controlador de vista de p√°gina almacena una matriz de Page instancias, que deben ser un tipo de View. Estas son las p√°ginas que utiliza para desplazarse entre puntos de referencia.
struct PageViewController<Page: View>: UIViewControllerRepresentable {
    
    // X_üîπ Propiedades principales
    var pages: [Page] // 0_Es un array que contiene todas las p√°ginas que se mostrar√°n en el carrusel. Almacena las vistas que se mostrar√°n en el carrusel.
    @Binding var currentPage: Int // Controla qu√© p√°gina se est√° mostrando.  Permite a SwiftUI conocer y actualizar la p√°gina actual.

    // 4_üîπ makeCoordinator(): Crea un coordinador.
    // El coordinador (Coordinator) maneja la l√≥gica de navegaci√≥n. SwiftUI llama a este m√©todo antes de configurar el controlador.
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    //1_üîπ makeUIViewController(context:): Crea UIPageViewController
    // SwiftUI llama a este m√©todo una sola vez cuando est√° listo para mostrar la vista y luego administra el ciclo de vida de los controladores de vista.
    // Crea el UIPageViewController que permite deslizar entre p√°ginas. Define que el context.coordinator ser√° el delegado y el proveedor de datos.
    func makeUIViewController(context: Context) -> UIPageViewController {
        
        let pageViewController = UIPageViewController(
            transitionStyle: .scroll,
            navigationOrientation: .horizontal)
        
        pageViewController.dataSource = context.coordinator
        pageViewController.delegate = context.coordinator

        return pageViewController
    }

    // 2_üîπ updateUIViewController(_:context:): Actualiza la vista
    // Por ahora, creas el eso alberga el Vista SwiftUI en cada actualizaci√≥n. M√°s tarde, har√° que esto sea m√°s eficiente inicializando el controlador solo una vez durante la vida √∫til del controlador de vista de p√°gina
    // Se llama cada vez que currentPage cambia. Muestra la vista correspondiente en controllers[currentPage].
    func updateUIViewController(_ pageViewController: UIPageViewController, context: Context) {
        pageViewController.setViewControllers(
            [context.coordinator.controllers[currentPage]], direction: .forward, animated: true)
    }

    // 3_üéõ Implementaci√≥n del Coordinador
    // La clase Coordinator maneja la navegaci√≥n entre p√°ginas.
    // Una vista SwiftUI que representa un controlador de vista UIKit puede definir un Coordinator escriba que SwiftUI administre y proporcione como parte del contexto de vistas representables. SwiftUI gestiona tu coordinador de tipos y lo proporciona como parte del contexto al llamar a los m√©todos que cre√≥ anteriormente
    class Coordinator: NSObject, // Extiende NSObject para interactuar con UIKit.
                    // Estos dos m√©todos establecen las relaciones entre los controladores de vista, para que pueda deslizar hacia adelante y hacia atr√°s entre ellos y  manejar la navegaci√≥n.
                       UIPageViewControllerDataSource,
                       UIPageViewControllerDelegate {
    
        // üîπ Propiedades del Coordinator.
        var parent: PageViewController // Referencia a PageViewController para acceder a sus datos.
        var controllers = [UIViewController]() // Contiene los controladores de vista (UIHostingController) que representan las p√°ginas SwiftUI.

        // üîπ init(_ pageViewController:): Configura los controladores
        // Convierte cada vista SwiftUI en UIHostingController y la almacena en controllers.
        // El coordinador es un buen lugar para almacenar estos controladores, porque el sistema los inicializa solo una vez, y antes de que los necesite para actualizar el controlador de vista.
        init(_ pageViewController: PageViewController) {
            parent = pageViewController
            controllers = parent.pages.map { UIHostingController(rootView: $0) }
        }

        // üîπ Navegaci√≥n entre p√°ginas
        // üìç viewControllerBefore: Devuelve la p√°gina anterior o vuelve a la √∫ltima si estamos en la primera.
        func pageViewController(
            _ pageViewController: UIPageViewController,
            viewControllerBefore viewController: UIViewController) -> UIViewController? {
                
            guard let index = controllers.firstIndex(of: viewController) else {
                return nil
            }
                
            if index == 0 {
                return controllers.last // Vuelve al final si est√° en la primera p√°gina
            }
                
            return controllers[index - 1] // Va a la p√°gina anterior
        }

        // üìç viewControllerAfter: Devuelve la p√°gina siguiente o vuelve a la primera si estamos en la √∫ltima.
        func pageViewController(
            _ pageViewController: UIPageViewController,
            viewControllerAfter viewController: UIViewController) -> UIViewController? {
            guard let index = controllers.firstIndex(of: viewController) else {
                return nil
            }
            if index + 1 == controllers.count {
                return controllers.first // Vuelve al inicio si est√° en la √∫ltima
            }
                
            return controllers[index + 1] // Va a la p√°gina siguiente
        }

        // üîπ Actualizar currentPage despu√©s de deslizar: Cuando el usuario termina de deslizar, actualiza currentPage en SwiftUI.
        func pageViewController(
            _ pageViewController: UIPageViewController,
            didFinishAnimating finished: Bool,
            previousViewControllers: [UIViewController],
            transitionCompleted completed: Bool) {
            
            if completed,
               let visibleViewController = pageViewController.viewControllers?.first,
               let index = controllers.firstIndex(of: visibleViewController) {
                parent.currentPage = index // Actualiza `currentPage`
            }
        }
    }
}
